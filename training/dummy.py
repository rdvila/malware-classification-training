#!/usr/bin/env python

import json
import os
import sys
import glob
import random
import argparse
from random import randint

labels = ['adware', 'flooder', 'ransomware', 'dropper', 'spyware', 'packed', 'crypto_miner', 'file_infector', 'installer', 'worm', 'downloader']
features = [f"feature_{x}" for x in range(2381)]
prefix="/opt/ml"

def log_container_info():
    print('------------------- environment variables -------------------')
    print(os.environ)
    print('------------------- environment variables -------------------')
    print('------------------- arguments -------------------')
    print(sys.argv)
    print('------------------- arguments -------------------')
    print('------------------- filesystem -------------------')
    for filename in glob.iglob(prefix + '**/**', recursive=True):
        print(filename)
    print('------------------- filesystem -------------------')
    print('------------------- config -------------------')
    for filename in glob.iglob(prefix + '**/**', recursive=True):
        if filename.endswith(".json"):
            print(f'------------------- {filename} -------------------')
            with open(filename, "r") as f:
                print(f.read())
            print(f'------------------- {filename} -------------------')
    print('------------------- config -------------------')


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("-data-folder", type=str, default="data")
    parser.add_argument("-scaler-folder", type=str, default="scaler")
    parser.add_argument("-kbest-folder", type=str, default="k-best")
    parser.add_argument("-name-train", type=str, default='train')
    parser.add_argument("-name-test", type=str, default='test')
    parser.add_argument("-k", type=int, default=100)
    parser.add_argument("-sample", type=float, default=0.1)
    parser.add_argument("-random-state", type=int, default=randint(0, 2**32))
    with open('/opt/ml/input/config/hyperparameters.json', 'r') as f:
        hyperparameters = json.load(f)
    
    args, unknown = parser.parse_known_args()
    log_container_info()

    if "_tuning_objective_metric" in hyperparameters:
        print("tuning using validation data")
        args.name_train = "val"
        del hyperparameters["_tuning_objective_metric"]

    print(f"accuracy_score=0.99999;")
    sys.exit(0)
